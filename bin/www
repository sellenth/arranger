#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
var proc = require('../transform-router');
var db = require('../database.js')

io.on('connection', function(socket){
  console.log('\ta user has connected');
  socket.on('pic_dat', function(dat){
    //var fd = proc(dat);
    var insert = 'INSERT INTO arrangements (data) VALUES (?)'
    dat = JSON.stringify(dat);
    db.run(insert, [dat], (err) => {
      if (err) {
        console.log("Insert error: " + err) 
      }
    });
    io.emit('server_msg', 'msg_received');
  });

  socket.on('arr_req', function(){
    var sql = "select * from arrangements"
    db.all(sql, (err, rows) => {
      if (err) {
        io.emit('get_response', "couldn't get a row :(");
      }
      io.emit('get_res', rows[rows.length - 1].data);
    });
    
  })

  socket.on('disconnect', function(){
    console.log('user disconnected');
  });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
